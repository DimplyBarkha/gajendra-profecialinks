singleRecord: false
regionsSelector: null
recordSelector: null
recordXPath: //*[@id="aod-offer"] | (//html[not(//*[@id="aod-offer"])]//*)[1] | (//*[@id="aod-sticky-pinned-offer"] | //*[@id='aod-pinned-offer'])[1]
fields:
  - name: name
    xpath: (ancestor::html//h5[@id='aod-asin-title-text'])[1]
  - name: getInventory
    xpath: ./@getinventory
    defaultValue: 'false'
  - name: aggregateRating
    xpath: translate(substring-after(ancestor::html//*[@id='aod-asin-reviews-star']/@class, 'a-star-'), '-', '.')
  - name: reviewCount
    xpath: translate(substring-before(ancestor::html//*[@id='aod-asin-reviews-count-title'], ' '), ',.', '')
    regExp: ^[^a-zA-Z]+
  - name: image
    xpath: ancestor::html//img[@id='aod-asin-image-id']/@src
  - name: resellerName
    xpath: .//*[@id='aod-offer-soldBy']//a[@rel='noopener']
  - name: resellerId
    xpath: .//*[@id='aod-offer-soldBy']//a[@rel='noopener']/@href
    regExp: seller=(\w+)
    regExpReplace: $1
  - name: resellerReviewCount
    xpath: translate(substring-before(substring-after(.//*[@id='seller-rating-count-{iter}']/span/text()[1],'('), ' '), ',', ' ')
    regExp: \(([^\s]+)
    regExpReplace: $1
  - name: resellerAggregateRating
    xpath: translate(substring-before(substring-after(.//*[@id='seller-rating-count-{iter}']/preceding-sibling::i[1]/@class, 'a-star-mini-'), ' '), '-', '.')
  - name: resellerFeedbackPercent
    xpath: substring-before(.//*[@id='seller-rating-count-{iter}']/span/br/following-sibling::text(), '%')
  - name: fulfillmentBy
    xpath: concat(substring-after(substring-before(.//*[@id='aod-offer-soldBy']//a[@rel='noopener' and contains(@href,'isAmazonFulfilled=1')]/@href, 'Fulfilled'), 'is') , .//*[@id='aod-offer-soldBy']//a[@rel='noopener' and contains(@href,'isAmazonFulfilled=0')])
  - name: shippingCost
    xpath: concat(translate(.//*[contains(@id, "elivery") and contains(@id, "essage")]//b/preceding-sibling::text()[1], translate(.,'0123456789.,',''), '') , translate(.//*[contains(@class, 'aod-delivery-promise')]/preceding-sibling::span[1]/span//text(), translate(.,'0123456789.,',''), ''))
    defaultValue: '0.00'
  - name: productId
    xpath: substring-after(.//input[contains(@name,"metric-asin")]/@name, 'metric-asin.')
  - name: price
    xpath: concat(concat(.//span[@class="a-price-whole"]/text()[1], .//span[@class="a-price-decimal"]), .//span[@class="a-price-fraction"]/text()[1])
    description: price - Product Price
  - name: brandText
    xpath: ancestor::html//div[@id="olpProductByline"]
  - name: deliveryDate
    xpath: (.//*[contains(@id, "elivery") and contains(@id, "essage")]//b/text()[1])[1]
  