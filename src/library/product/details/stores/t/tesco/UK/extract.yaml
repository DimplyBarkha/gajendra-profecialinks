singleRecord: false
regionsSelector: null
recordSelector: null
recordXPath: null
fields:
  - name: image
    singleValue: true
    xpath: //img[@class="product-image product-image-visible"]/@src|//div[contains(@class,'product-image--wrapper')]/span//img/@src
  - name: alternateImages
    singleValue: false
    xpath: //ul[@class="carousel__list"]/li//img[not(contains(@class,'selected'))]/@src[contains(.,'https')] | //body//@additional_image
  - name: imageAlt
    singleValue: true
    xpath: //img[@class="product-image product-image-visible"]/@alt|//div[contains(@class,'product-image--wrapper')]/span//img/@alt
  - name: nameExtended
    singleValue: true
    xpath: //h1[@class="product-details-tile__title"]
  - name: name
    singleValue: true
    xpath: //h1[@class="product-details-tile__title"]
  - name: url
    singleValue: true
    xpath: //link[@rel="canonical"]/@href
  - name: category
    singleValue: false
    xpath: //nav[@aria-label="breadcrumb"]/ol/li//a/span/span
  - name: description
    singleValue: true
    xpath: concat(//div[contains(@id,'product-description')]//ul,//div[contains(@id,'product-marketing')]//ul,//div[contains(@id,'other-information')]//ul,//div[contains(@id,'features')]//ul,//div[contains(@id,'pack-size')]//ul)
  - name: price
    singleValue: true
    xpath: //div[@class="product-details-tile"]//div[contains(@class,"price-per-sellable-unit")]|(//div[@data-auto="product-controls"]//div[contains(@class,'price-details--wrapper')]/div//span[@data-auto="price-value"])[1]
  - name: availabilityText
    xpath: //script[@type="application/ld+json"][contains(text(),'availability":"http://schema.org/InStock"')]
    regExp: (.+)
    regExpReplace: In Stock
    defaultValue: Out Of Stock
  - name: descriptionBullets
    singleValue: false
  - name: ingredientsList
    singleValue: false
    xpath: //div[contains(@id,'ingredients')]/p
    regExp: "[^|]+"
  - name: brandText
    singleValue: false
    xpath: //script[@type="application/ld+json"][contains(text(),"brand")]
    regExp: brand":{"@type":"[^"]+","name":"([^"]+)
    regExpReplace: $1
  - name: manufacturer
    singleValue: true
    xpath: //div[@id="manufacturer-address"]/ul
  - name: weightNet
    singleValue: true
    xpath: //div[@id="net-contents"]/p
  - name: sku
    singleValue: false
    xpath: //script[@type="application/ld+json"][contains(text(),"sku")]
    regExp: sku":"([^"]+)
    regExpReplace: $1
  - name: asin
    singleValue: false
    xpath: //script[@type="application/ld+json"][contains(text(),"sku")]
    regExp: sku":"([^"]+)
    regExpReplace: $1
  - name: variantId
    singleValue: false
    xpath: //script[@type="application/ld+json"][contains(text(),"sku")]
    regExp: sku":"([^"]+)
    regExpReplace: $1
  - name: ratingCount
    singleValue: false
    xpath: //script[@type="application/ld+json"][contains(text(),"reviewCount")]
    regExp: reviewCount":([^}]+)
    regExpReplace: $1
  - name: aggregateRating
    singleValue: false
    xpath: //script[@type="application/ld+json"][contains(text(),"ratingValue")]
    regExp: ratingValue":([^,"]+)
    regExpReplace: $1
  - name: shippingInfo
    singleValue: true
    xpath: //div[@id="return-address"]/ul
  - name: numberOfServingsInPackage
    singleValue: true
    xpath: //div[@id="uses"]/p
  - name: storage
    singleValue: true
    xpath: //div[@id="storage-details"]/p
  - name: gtin
    singleValue: false
    xpath: //script[@type="application/ld+json"][contains(text(),"gtin")]
    regExp: gtin13":"([^"]+)
    regExpReplace: $1
  - name: additives
    singleValue: true
    xpath: //div[@id="additives"]/ul
  - name: allergyAdvice
    singleValue: true
    xpath: //div[@id="allergens"]/ul
  - name: recyclingInformation
    singleValue: true
    xpath: //div[@id="recycling-info"]/p
  - name: saltPerServing
    singleValue: true
    xpath: //td[contains(text(),"Salt")]/following-sibling::td[not(contains(.,'%*'))]|(//td[contains(text(),"Salt")]/following-sibling::td[1])[1]
    regExp: (\d+(\.\d+)?)
  - name: saltPerServingUom
    singleValue: false
    xpath: //td[contains(text(),"Salt")]/following-sibling::td[not(contains(.,'%*'))]|(//td[contains(text(),"Salt")]/following-sibling::td[1])[1]
    regExp: g
  - name: totalFatPerServing
    singleValue: true
    xpath: //td[contains(text(),"Fat")]/following-sibling::td[not(contains(.,'%*'))]|//td[contains(text(),"Fat")]/following-sibling::td[1]
    regExp: (\d+(\.\d+)?)
  - name: totalFatPerServingUom
    singleValue: false
    xpath: //td[contains(text(),"Fat")]/following-sibling::td[not(contains(.,'%*'))]|//td[contains(text(),"Fat")]/following-sibling::td[1]
    regExp: g
  - name: saturatedFatPerServing
    singleValue: true
    xpath: //td[contains(text(),"of which Saturates")]/following-sibling::td[not(contains(.,'%*'))]|//td[normalize-space(text())="Saturates"]/following-sibling::td[1] | //td[normalize-space(text())="of which saturates"]/following-sibling::td[1]|//td[normalize-space(text())="of which Saturates"]/following-sibling::td[1]|//td[contains(text(),"Saturates")]/following-sibling::td[1]|//td[contains(text(),"saturates")]/following-sibling::td[1]|//td[contains(text(),"Saturated")]/following-sibling::td[1]
    regExp: (\d+(\.\d+)?)
  - name: saturatedFatPerServingUom
    singleValue: false
    xpath: //td[contains(text(),"of which Saturates")]/following-sibling::td[not(contains(.,'%*'))]|//td[normalize-space(text())="Saturates"]/following-sibling::td[1] | //td[normalize-space(text())="of which saturates"]/following-sibling::td[1]|//td[normalize-space(text())="of which Saturates"]/following-sibling::td[1]|//td[contains(text(),"Saturates")]/following-sibling::td[1]|//td[contains(text(),"saturates")]/following-sibling::td[1]|//td[contains(text(),"Saturated")]/following-sibling::td[1]
    regExp: g
  - name: totalCarbPerServing
    singleValue: true
    xpath: //td[normalize-space(text())="Carbohydrates"]/following-sibling::td[1]|//td[normalize-space(text())="Carbohydrate"]/following-sibling::td[1]|//td[contains(text(),"Carbohydrate")]/following-sibling::td[1]
    regExp: ([^\sg]+)
  - name: totalCarbPerServingUom
    singleValue: false
    xpath: //td[normalize-space(text())="Carbohydrates"]/following-sibling::td[1]|//td[normalize-space(text())="Carbohydrate"]/following-sibling::td[1]|//td[contains(text(),"Carbohydrate")]/following-sibling::td[1]
    regExp: g
  - name: totalSugarsPerServing
    singleValue: true
    xpath: //td[contains(text(),"of which Sugars")]/following-sibling::td[not(contains(.,'%*'))]|//td[normalize-space(text())="Sugars"]/following-sibling::td[1] | //td[normalize-space(text())="of which sugars"]/following-sibling::td[1]|//td[normalize-space(text())="of which Sugars"]/following-sibling::td[1]|//td[contains(text(),"sugars")]/following-sibling::td[1]|//td[contains(text(),"Of which Sugars")]/following-sibling::td[1]
    regExp: ([^\sg]+)|Trace
  - name: totalSugarsPerServingUom
    singleValue: false
    xpath: //td[contains(text(),"of which Sugars")]/following-sibling::td[not(contains(.,'%*'))]|//td[normalize-space(text())="Sugars"]/following-sibling::td[1] | //td[normalize-space(text())="of which sugars"]/following-sibling::td[1]|//td[normalize-space(text())="of which Sugars"]/following-sibling::td[1]|//td[contains(text(),"sugars")]/following-sibling::td[1]|//td[contains(text(),"Of which Sugars")]/following-sibling::td[1]
    regExp: g
  - name: proteinPerServing
    singleValue: true
    xpath: //td[normalize-space(text())="Protein"]/following-sibling::td[1] | //td[normalize-space(text())="Protein g"]/following-sibling::td[1]|//td[contains(text(),"Protein")]/following-sibling::td[1]
    regExp: ([^\sg]+)
  - name: proteinPerServingUom
    singleValue: false
    xpath: //td[normalize-space(text())="Protein"]/following-sibling::td[1] | //td[normalize-space(text())="Protein g"]/following-sibling::td[1]|//td[contains(text(),"Protein")]/following-sibling::td[1]
    regExp: g
  - name: calciumPerServing
    singleValue: true
    xpath: //td[normalize-space(text())="Calcium"]/following-sibling::td[1] |//td[contains(text(),"Calcium")]/following-sibling::td[1]
    regExp: (\d+(\.\d+)?)
  - name: calciumPerServingUom
    singleValue: true
    xpath: //td[normalize-space(text())="Calcium"]/following-sibling::td[1] | //td[contains(text(),"Calcium")]/following-sibling::td[1]
    regExp: mg
  - name: dietaryFibrePerServing
    singleValue: true
    xpath: //td[normalize-space(text())="Fibre"]/following-sibling::td[1] |//td[contains(text(),"Fibre")]/following-sibling::td[1] | //td[contains(text(),"fibre")]/following-sibling::td[1]
    regExp: ([^\s(g|%)]+)
  - name: dietaryFibrePerServingUom
    singleValue: true
    xpath: //td[normalize-space(text())="Fibre"]/following-sibling::td[1] |//td[contains(text(),"Fibre")]/following-sibling::td[1]
    regExp: g
  - name: pricePerUnit2
    singleValue: true
    xpath: //div[@class="price-per-quantity-weight"]/span[1]
  - name: pricePerUnitUom
    regExp: '[^\/]+$'
    singleValue: true
    xpath: //div[@class="price-per-quantity-weight"]/span[2]
  - name: listPrice
    singleValue: true
    xpath: //div[@class="product-details-tile"]//span[@class="offer-text"]
    regExp: (?<=Was\s)(.+)(?=\sNow)
  - name: quantity
    singleValue: false
    xpath: //div[contains(@id,"net-contents")]/p
  - name: packSize
    singleValue: true
    xpath: //div[@id="net-contents"]/p
  - name: directions
    singleValue: true
    xpath: //div[@id="preparation-and-usage"]//ul|//div[contains(@id,'uses')]/p
  - name: warnings
    singleValue: true
    xpath: //div[@id="warnings"]//ul|//div[contains(@id,'lower-age-limit')]
  - name: caloriesPerServing
    singleValue: true
    xpath: concat(//td[contains(text(),"Energy")]/following-sibling::td[1],"/", //tr/following-sibling::td[contains(text(),"cal")]/following-sibling::td[1] | //td[contains(text(),"Energy")]/../following-sibling::tr[contains(.,'cal')]//td[2])
  # - name: servingSize
  #   singleValue: true
  #   xpath: //table[@class="product__info-table"]//tr/th[2]
  #   regExp: (\d+(\.\d+)?)
  # - name: servingSizeUom
  #   singleValue: false
  #   xpath: //table[@class="product__info-table"]//tr/th[2]
  #   regExp: '[^\d]+$'
  - name: productUrl
    singleValue: false
    xpath: //link[@rel="canonical"]/@href
    regExp: '[^\d]+$'
  - name: sodiumPerServing
    singleValue: true
    xpath: //td[contains(text(),"Sodium")]/following-sibling::td[1]
    regExp: (\d+(\.\d+)?)
  - name: sodiumPerServingUom
    singleValue: true
    xpath: //td[contains(text(),"Sodium")]/following-sibling::td[1]
    regExp: '[^\d]+$'
  - name: ironPerServing
    singleValue: true
    xpath: //td[contains(text(),"Iron")]/following-sibling::td[1]
    regExp: (\d+(\.\d+)?)
  - name: ironPerServingUom
    singleValue: false
    xpath: //td[contains(text(),"Iron")]/following-sibling::td[1]
    regExp: '[^\d]+$'
  - name: magnesiumPerServing
    singleValue: true
    xpath: //td[contains(text(),"Magnesium")]/following-sibling::td[1]
    regExp: (\d+(\.\d+)?)
  - name: magnesiumPerServingUom
    singleValue: false
    xpath: //td[contains(text(),"Magnesium")]/following-sibling::td[1]
    regExp: '[^\d]+$'
  - name: vitaminAPerServing
    singleValue: true
    xpath: //td[contains(text(),"Vitamin A")]/following-sibling::td[1]
    regExp: (\d+(\.\d+)?)
  - name: vitaminAPerServingUom
    singleValue: false
    xpath: //td[contains(text(),"Vitamin A")]/following-sibling::td[1]
    regExp: '[^\d]+$'
  - name: vitaminCPerServing
    singleValue: true
    xpath: //td[contains(text(),"Vitamin C")]/following-sibling::td[1]
    regExp: (\d+(\.\d+)?)
  - name: vitaminCPerServingUom
    singleValue: false
    xpath: //td[contains(text(),"Vitamin C")]/following-sibling::td[1]
    regExp: '[^\d]+$'
  - name: promotion
    singleValue: false
    xpath: (//ul[contains(@class,"product-promotion")]/li//span[@class='offer-text'])[1]
  - name: alcoholContent
    singleValue: false
    xpath: //div[@id="percentage-alcohol"]/p
  - name: dietarySymbols
    singleValue: true
    xpath: //span[contains(.,'Suitable for vegetarians')]
