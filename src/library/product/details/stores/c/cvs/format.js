/**
 *
 * @param {ImportIO.Group[]} data
 * @returns {ImportIO.Group[]}
 */
const transform = (data, context) => {
  // const cleanUp = (data, context) => {
  //   data.forEach(obj => obj.group.forEach(row => Object.keys(row).forEach(header => row[header].forEach(el => {
  //     el.text = clean(el.text);
  //   }))));
  //   return data;
  // };
  const clean = text => text.toString()
    .replace(/\r\n|\r|\n/g, ' ')
    .replace(/&amp;nbsp;/g, ' ')
    .replace(/&amp;#160/g, ' ')
    .replace(/\u00A0/g, ' ')
    .replace(/\s{2,}/g, ' ')
    .replace(/"\s{1,}/g, '"')
    .replace(/\s{1,}"/g, '"')
    .replace(/^ +| +$|( )+/g, ' ')
    .replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, ' ')
    // eslint-disable-next-line no-control-regex
    .replace(/[\x00-\x1F]/g, '')
    .replace(/\"/g, ' " ')
    .replace(/&#(\d+);/g, function (match, dec) {
      return String.fromCharCode(dec);
    })
    .replace(/\s{2,}/g, ' ')
    .replace(/&lt;/g, '<')
    .replace(/&lt/g, '<')
    .replace(/&gt;/g, '>')
    .replace(/&gt/g, '>')
    .replace(/&nbsp;/g, ' ')
    .replace(/&nbsp/g, ' ')
    .replace(/&iexcl;/g, '¡')
    .replace(/&iexcl/g, '¡')
    .replace(/&cent;/g, '¢')
    .replace(/&cent/g, '¢')
    .replace(/&pound;/g, '£')
    .replace(/&pound/g, '£')
    .replace(/&curren;/g, '¤')
    .replace(/&curren/g, '¤')
    .replace(/&yen;/g, '¥')
    .replace(/&yen/g, '¥')
    .replace(/&brvbar;/g, '¦')
    .replace(/&brvbar/g, '¦')
    .replace(/&sect;/g, '§')
    .replace(/&sect/g, '§')
    .replace(/&uml;/g, '¨')
    .replace(/&uml/g, '¨')
    .replace(/&copy;/g, '©')
    .replace(/&copy/g, '©')
    .replace(/&ordf;/g, 'ª')
    .replace(/&ordf/g, 'ª')
    .replace(/&laquo;/g, '«')
    .replace(/&laquo/g, '«')
    .replace(/&not;/g, '¬')
    .replace(/&not/g, '¬')
    .replace(/&reg;/g, '®')
    .replace(/&reg/g, '®')
    .replace(/&macr;/g, '¯')
    .replace(/&macr/g, '¯')
    .replace(/&deg;/g, '°')
    .replace(/&deg/g, '°')
    .replace(/&plusmn;/g, '±')
    .replace(/&plusmn/g, '±')
    .replace(/&sup2;/g, '²')
    .replace(/&sup2/g, '²')
    .replace(/&sup3;/g, '³')
    .replace(/&sup3/g, '³')
    .replace(/&acute;/g, '´')
    .replace(/&acute/g, '´')
    .replace(/&micro;/g, 'µ')
    .replace(/&micro/g, 'µ')
    .replace(/&para;/g, '¶')
    .replace(/&para/g, '¶')
    .replace(/&middot;/g, '·')
    .replace(/&middot/g, '·')
    .replace(/&cedil;/g, '¸')
    .replace(/&cedil/g, '¸')
    .replace(/&sup1;/g, '¹')
    .replace(/&sup1/g, '¹')
    .replace(/&ordm;/g, 'º')
    .replace(/&ordm/g, 'º')
    .replace(/&raquo;/g, '»')
    .replace(/&raquo/g, '»')
    .replace(/&frac14;/g, '¼')
    .replace(/&frac14/g, '¼')
    .replace(/&frac12;/g, '½')
    .replace(/&frac12/g, '½')
    .replace(/&frac34;/g, '¾')
    .replace(/&frac34/g, '¾')
    .replace(/&iquest;/g, '¿')
    .replace(/&iquest/g, '¿')
    .replace(/&Agrave;/g, 'À')
    .replace(/&Agrave/g, 'À')
    .replace(/&Aacute;/g, 'Á')
    .replace(/&Aacute/g, 'Á')
    .replace(/&Acirc;/g, 'Â')
    .replace(/&Acirc/g, 'Â')
    .replace(/&Atilde;/g, 'Ã')
    .replace(/&Atilde/g, 'Ã')
    .replace(/&Auml;/g, 'Ä')
    .replace(/&Auml/g, 'Ä')
    .replace(/&Aring;/g, 'Å')
    .replace(/&Aring/g, 'Å')
    .replace(/&AElig;/g, 'Æ')
    .replace(/&AElig/g, 'Æ')
    .replace(/&Ccedil;/g, 'Ç')
    .replace(/&Ccedil/g, 'Ç')
    .replace(/&Egrave;/g, 'È')
    .replace(/&Egrave/g, 'È')
    .replace(/&Eacute;/g, 'É')
    .replace(/&Eacute/g, 'É')
    .replace(/&Ecirc;/g, 'Ê')
    .replace(/&Ecirc/g, 'Ê')
    .replace(/&Euml;/g, 'Ë')
    .replace(/&Euml/g, 'Ë')
    .replace(/&Igrave;/g, 'Ì')
    .replace(/&Igrave/g, 'Ì')
    .replace(/&Iacute;/g, 'Í')
    .replace(/&Iacute/g, 'Í')
    .replace(/&Icirc;/g, 'Î')
    .replace(/&Icirc/g, 'Î')
    .replace(/&Iuml;/g, 'Ï')
    .replace(/&Iuml/g, 'Ï')
    .replace(/&ETH;/g, 'Ð')
    .replace(/&ETH/g, 'Ð')
    .replace(/&Ntilde;/g, 'Ñ')
    .replace(/&Ntilde/g, 'Ñ')
    .replace(/&Ograve;/g, 'Ò')
    .replace(/&Ograve/g, 'Ò')
    .replace(/&Oacute;/g, 'Ó')
    .replace(/&Oacute/g, 'Ó')
    .replace(/&Ocirc;/g, 'Ô')
    .replace(/&Ocirc/g, 'Ô')
    .replace(/&Otilde;/g, 'Õ')
    .replace(/&Otilde/g, 'Õ')
    .replace(/&Ouml;/g, 'Ö')
    .replace(/&Ouml/g, 'Ö')
    .replace(/&times;/g, '×')
    .replace(/&times/g, '×')
    .replace(/&Oslash;/g, 'Ø')
    .replace(/&Oslash/g, 'Ø')
    .replace(/&Ugrave;/g, 'Ù')
    .replace(/&Ugrave/g, 'Ù')
    .replace(/&Uacute;/g, 'Ú')
    .replace(/&Uacute/g, 'Ú')
    .replace(/&Ucirc;/g, 'Û')
    .replace(/&Ucirc/g, 'Û')
    .replace(/&Uuml;/g, 'Ü')
    .replace(/&Uuml/g, 'Ü')
    .replace(/&Yacute;/g, 'Ý')
    .replace(/&Yacute/g, 'Ý')
    .replace(/&THORN;/g, 'Þ')
    .replace(/&THORN/g, 'Þ')
    .replace(/&szlig;/g, 'ß')
    .replace(/&szlig/g, 'ß')
    .replace(/&agrave;/g, 'à')
    .replace(/&agrave/g, 'à')
    .replace(/&aacute;/g, 'á')
    .replace(/&aacute/g, 'á')
    .replace(/&acirc;/g, 'â')
    .replace(/&acirc/g, 'â')
    .replace(/&atilde;/g, 'ã')
    .replace(/&atilde/g, 'ã')
    .replace(/&auml;/g, 'ä')
    .replace(/&auml/g, 'ä')
    .replace(/&aring;/g, 'å')
    .replace(/&aring/g, 'å')
    .replace(/&aelig;/g, 'æ')
    .replace(/&aelig/g, 'æ')
    .replace(/&ccedil;/g, 'ç')
    .replace(/&ccedil/g, 'ç')
    .replace(/&egrave;/g, 'è')
    .replace(/&egrave/g, 'è')
    .replace(/&eacute;/g, 'é')
    .replace(/&eacute/g, 'é')
    .replace(/&ecirc;/g, 'ê')
    .replace(/&ecirc/g, 'ê')
    .replace(/&euml;/g, 'ë')
    .replace(/&euml/g, 'ë')
    .replace(/&igrave;/g, 'ì')
    .replace(/&igrave/g, 'ì')
    .replace(/&iacute;/g, 'í')
    .replace(/&iacute/g, 'í')
    .replace(/&icirc;/g, 'î')
    .replace(/&icirc/g, 'î')
    .replace(/&iuml;/g, 'ï')
    .replace(/&iuml/g, 'ï')
    .replace(/&eth;/g, 'ð')
    .replace(/&eth/g, 'ð')
    .replace(/&ntilde;/g, 'ñ')
    .replace(/&ntilde/g, 'ñ')
    .replace(/&ograve;/g, 'ò')
    .replace(/&ograve/g, 'ò')
    .replace(/&oacute;/g, 'ó')
    .replace(/&oacute/g, 'ó')
    .replace(/&ocirc;/g, 'ô')
    .replace(/&ocirc/g, 'ô')
    .replace(/&otilde;/g, 'õ')
    .replace(/&otilde/g, 'õ')
    .replace(/&ouml;/g, 'ö')
    .replace(/&ouml/g, 'ö')
    .replace(/&divide;/g, '÷')
    .replace(/&divide/g, '÷')
    .replace(/&oslash;/g, 'ø')
    .replace(/&oslash/g, 'ø')
    .replace(/&ugrave;/g, 'ù')
    .replace(/&ugrave/g, 'ù')
    .replace(/&uacute;/g, 'ú')
    .replace(/&uacute/g, 'ú')
    .replace(/&ucirc;/g, 'û')
    .replace(/&ucirc/g, 'û')
    .replace(/&uuml;/g, 'ü')
    .replace(/&uuml/g, 'ü')
    .replace(/&yacute;/g, 'ý')
    .replace(/&yacute/g, 'ý')
    .replace(/&thorn;/g, 'þ')
    .replace(/&thorn/g, 'þ')
    .replace(/&yuml;/g, 'ÿ')
    .replace(/&yuml/g, 'ÿ')
    .replace(/&OElig;/g, 'Œ')
    .replace(/&OElig/g, 'Œ')
    .replace(/&oelig;/g, 'œ')
    .replace(/&oelig/g, 'œ')
    .replace(/&Scaron;/g, 'Š')
    .replace(/&Scaron/g, 'Š')
    .replace(/&scaron;/g, 'š')
    .replace(/&scaron/g, 'š')
    .replace(/&Yuml;/g, 'Ÿ')
    .replace(/&Yuml/g, 'Ÿ')
    .replace(/&fnof;/g, 'ƒ')
    .replace(/&fnof/g, 'ƒ')
    .replace(/&circ;/g, 'ˆ')
    .replace(/&circ/g, 'ˆ')
    .replace(/&tilde;/g, '˜')
    .replace(/&tilde/g, '˜')
    .replace(/&Alpha;/g, 'Α')
    .replace(/&Alpha/g, 'Α')
    .replace(/&Beta;/g, 'Β')
    .replace(/&Beta/g, 'Β')
    .replace(/&Gamma;/g, 'Γ')
    .replace(/&Gamma/g, 'Γ')
    .replace(/&Delta;/g, 'Δ')
    .replace(/&Delta/g, 'Δ')
    .replace(/&Epsilon;/g, 'Ε')
    .replace(/&Epsilon/g, 'Ε')
    .replace(/&Zeta;/g, 'Ζ')
    .replace(/&Zeta/g, 'Ζ')
    .replace(/&Eta;/g, 'Η')
    .replace(/&Eta/g, 'Η')
    .replace(/&Theta;/g, 'Θ')
    .replace(/&Theta/g, 'Θ')
    .replace(/&Iota;/g, 'Ι')
    .replace(/&Iota/g, 'Ι')
    .replace(/&Kappa;/g, 'Κ')
    .replace(/&Kappa/g, 'Κ')
    .replace(/&Lambda;/g, 'Λ')
    .replace(/&Lambda/g, 'Λ')
    .replace(/&Mu;/g, 'Μ')
    .replace(/&Mu/g, 'Μ')
    .replace(/&Nu;/g, 'Ν')
    .replace(/&Nu/g, 'Ν')
    .replace(/&Xi;/g, 'Ξ')
    .replace(/&Xi/g, 'Ξ')
    .replace(/&Omicron;/g, 'Ο')
    .replace(/&Omicron/g, 'Ο')
    .replace(/&Pi;/g, 'Π')
    .replace(/&Pi/g, 'Π')
    .replace(/&Rho;/g, 'Ρ')
    .replace(/&Rho/g, 'Ρ')
    .replace(/&Sigma;/g, 'Σ')
    .replace(/&Sigma/g, 'Σ')
    .replace(/&Tau;/g, 'Τ')
    .replace(/&Tau/g, 'Τ')
    .replace(/&Upsilon;/g, 'Υ')
    .replace(/&Upsilon/g, 'Υ')
    .replace(/&Phi;/g, 'Φ')
    .replace(/&Phi/g, 'Φ')
    .replace(/&Chi;/g, 'Χ')
    .replace(/&Chi/g, 'Χ')
    .replace(/&Psi;/g, 'Ψ')
    .replace(/&Psi/g, 'Ψ')
    .replace(/&Omega;/g, 'Ω')
    .replace(/&Omega/g, 'Ω')
    .replace(/&alpha;/g, 'α')
    .replace(/&alpha/g, 'α')
    .replace(/&beta;/g, 'β')
    .replace(/&beta/g, 'β')
    .replace(/&gamma;/g, 'γ')
    .replace(/&gamma/g, 'γ')
    .replace(/&delta;/g, 'δ')
    .replace(/&delta/g, 'δ')
    .replace(/&epsilon;/g, 'ε')
    .replace(/&epsilon/g, 'ε')
    .replace(/&zeta;/g, 'ζ')
    .replace(/&zeta/g, 'ζ')
    .replace(/&eta;/g, 'η')
    .replace(/&eta/g, 'η')
    .replace(/&theta;/g, 'θ')
    .replace(/&theta/g, 'θ')
    .replace(/&iota;/g, 'ι')
    .replace(/&iota/g, 'ι')
    .replace(/&kappa;/g, 'κ')
    .replace(/&kappa/g, 'κ')
    .replace(/&lambda;/g, 'λ')
    .replace(/&lambda/g, 'λ')
    .replace(/&mu;/g, 'μ')
    .replace(/&mu/g, 'μ')
    .replace(/&nu;/g, 'ν')
    .replace(/&nu/g, 'ν')
    .replace(/&xi;/g, 'ξ')
    .replace(/&xi/g, 'ξ')
    .replace(/&omicron;/g, 'ο')
    .replace(/&omicron/g, 'ο')
    .replace(/&pi;/g, 'π')
    .replace(/&pi/g, 'π')
    .replace(/&rho;/g, 'ρ')
    .replace(/&rho/g, 'ρ')
    .replace(/&sigmaf;/g, 'ς')
    .replace(/&sigmaf/g, 'ς')
    .replace(/&sigma;/g, 'σ')
    .replace(/&sigma/g, 'σ')
    .replace(/&tau;/g, 'τ')
    .replace(/&tau/g, 'τ')
    .replace(/&upsilon;/g, 'υ')
    .replace(/&upsilon/g, 'υ')
    .replace(/&phi;/g, 'φ')
    .replace(/&phi/g, 'φ')
    .replace(/&chi;/g, 'χ')
    .replace(/&chi/g, 'χ')
    .replace(/&psi;/g, 'ψ')
    .replace(/&psi/g, 'ψ')
    .replace(/&omega;/g, 'ω')
    .replace(/&omega/g, 'ω')
    .replace(/&thetasym;/g, 'ϑ')
    .replace(/&thetasym/g, 'ϑ')
    .replace(/&Upsih;/g, 'ϒ')
    .replace(/&Upsih/g, 'ϒ')
    .replace(/&piv;/g, 'ϖ')
    .replace(/&piv/g, 'ϖ')
    .replace(/&ndash;/g, '–')
    .replace(/&ndash/g, '–')
    .replace(/&mdash;/g, '—')
    .replace(/&mdash/g, '—')
    .replace(/&lsquo;/g, '‘')
    .replace(/&lsquo/g, '‘')
    .replace(/&rsquo;/g, '’')
    .replace(/&rsquo/g, '’')
    .replace(/&sbquo;/g, '‚')
    .replace(/&sbquo/g, '‚')
    .replace(/&ldquo;/g, '“')
    .replace(/&ldquo/g, '“')
    .replace(/&rdquo;/g, '”')
    .replace(/&rdquo/g, '”')
    .replace(/&bdquo;/g, '„')
    .replace(/&bdquo/g, '„')
    .replace(/&dagger;/g, '†')
    .replace(/&dagger/g, '†')
    .replace(/&Dagger;/g, '‡')
    .replace(/&Dagger/g, '‡')
    .replace(/&bull;/g, '•')
    .replace(/&bull/g, '•')
    .replace(/&hellip;/g, '…')
    .replace(/&hellip/g, '…')
    .replace(/&permil;/g, '‰')
    .replace(/&permil/g, '‰')
    .replace(/&prime;/g, '′')
    .replace(/&prime/g, '′')
    .replace(/&Prime;/g, '″')
    .replace(/&Prime/g, '″')
    .replace(/&lsaquo;/g, '‹')
    .replace(/&lsaquo/g, '‹')
    .replace(/&rsaquo;/g, '›')
    .replace(/&rsaquo/g, '›')
    .replace(/&oline;/g, '‾')
    .replace(/&oline/g, '‾')
    .replace(/&frasl;/g, '⁄')
    .replace(/&frasl/g, '⁄')
    .replace(/&euro;/g, '€')
    .replace(/&euro/g, '€')
    .replace(/&image;/g, 'ℑ')
    .replace(/&image/g, 'ℑ')
    .replace(/&weierp;/g, '℘')
    .replace(/&weierp/g, '℘')
    .replace(/&real;/g, 'ℜ')
    .replace(/&real/g, 'ℜ')
    .replace(/&trade;/g, '™')
    .replace(/&trade/g, '™')
    .replace(/&alefsym;/g, 'ℵ')
    .replace(/&alefsym/g, 'ℵ')
    .replace(/&larr;/g, '←')
    .replace(/&larr/g, '←')
    .replace(/&uarr;/g, '↑')
    .replace(/&uarr/g, '↑')
    .replace(/&rarr;/g, '→')
    .replace(/&rarr/g, '→')
    .replace(/&darr;/g, '↓')
    .replace(/&darr/g, '↓')
    .replace(/&harr;/g, '↔')
    .replace(/&harr/g, '↔')
    .replace(/&crarr;/g, '↵')
    .replace(/&crarr/g, '↵')
    .replace(/&lArr;/g, '⇐')
    .replace(/&lArr/g, '⇐')
    .replace(/&UArr;/g, '⇑')
    .replace(/&UArr/g, '⇑')
    .replace(/&rArr;/g, '⇒')
    .replace(/&rArr/g, '⇒')
    .replace(/&dArr;/g, '⇓')
    .replace(/&dArr/g, '⇓')
    .replace(/&hArr;/g, '⇔')
    .replace(/&hArr/g, '⇔')
    .replace(/&forall;/g, '∀')
    .replace(/&forall/g, '∀')
    .replace(/&part;/g, '∂')
    .replace(/&part/g, '∂')
    .replace(/&exist;/g, '∃')
    .replace(/&exist/g, '∃')
    .replace(/&empty;/g, '∅')
    .replace(/&empty/g, '∅')
    .replace(/&nabla;/g, '∇')
    .replace(/&nabla/g, '∇')
    .replace(/&isin;/g, '∈')
    .replace(/&isin/g, '∈')
    .replace(/&notin;/g, '∉')
    .replace(/&notin/g, '∉')
    .replace(/&ni;/g, '∋')
    .replace(/&ni/g, '∋')
    .replace(/&prod;/g, '∏')
    .replace(/&prod/g, '∏')
    .replace(/&sum;/g, '∑')
    .replace(/&sum/g, '∑')
    .replace(/&minus;/g, '−')
    .replace(/&minus/g, '−')
    .replace(/&lowast;/g, '∗')
    .replace(/&lowast/g, '∗')
    .replace(/&radic;/g, '√')
    .replace(/&radic/g, '√')
    .replace(/&prop;/g, '∝')
    .replace(/&prop/g, '∝')
    .replace(/&infin;/g, '∞')
    .replace(/&infin/g, '∞')
    .replace(/&ang;/g, '∠')
    .replace(/&ang/g, '∠')
    .replace(/&and;/g, '∧')
    .replace(/&and/g, '∧')
    .replace(/&or;/g, '∨')
    .replace(/&or/g, '∨')
    .replace(/&cap;/g, '∩')
    .replace(/&cap/g, '∩')
    .replace(/&cup;/g, '∪')
    .replace(/&cup/g, '∪')
    .replace(/&int;/g, '∫')
    .replace(/&int/g, '∫')
    .replace(/&there4;/g, '∴')
    .replace(/&there4/g, '∴')
    .replace(/&sim;/g, '∼')
    .replace(/&sim/g, '∼')
    .replace(/&cong;/g, '≅')
    .replace(/&cong/g, '≅')
    .replace(/&asymp;/g, '≈')
    .replace(/&asymp/g, '≈')
    .replace(/&ne;/g, '≠')
    .replace(/&ne/g, '≠')
    .replace(/&equiv;/g, '≡')
    .replace(/&equiv/g, '≡')
    .replace(/&le;/g, '≤')
    .replace(/&le/g, '≤')
    .replace(/&ge;/g, '≥')
    .replace(/&ge/g, '≥')
    .replace(/&sub;/g, '⊂')
    .replace(/&sub/g, '⊂')
    .replace(/&sup;/g, '⊃')
    .replace(/&sup/g, '⊃')
    .replace(/&nsub;/g, '⊄')
    .replace(/&nsub/g, '⊄')
    .replace(/&sube;/g, '⊆')
    .replace(/&sube/g, '⊆')
    .replace(/&supe;/g, '⊇')
    .replace(/&supe/g, '⊇')
    .replace(/&oplus;/g, '⊕')
    .replace(/&oplus/g, '⊕')
    .replace(/&otimes;/g, '⊗')
    .replace(/&otimes/g, '⊗')
    .replace(/&perp;/g, '⊥')
    .replace(/&perp/g, '⊥')
    .replace(/&sdot;/g, '⋅')
    .replace(/&sdot/g, '⋅')
    .replace(/&lceil;/g, '⌈')
    .replace(/&lceil/g, '⌈')
    .replace(/&rceil;/g, '⌉')
    .replace(/&rceil/g, '⌉')
    .replace(/&lfloor;/g, '⌊')
    .replace(/&lfloor/g, '⌊')
    .replace(/&rfloor;/g, '⌋')
    .replace(/&rfloor/g, '⌋')
    .replace(/&lang;/g, '⟨')
    .replace(/&lang/g, '⟨')
    .replace(/&rang;/g, '⟩')
    .replace(/&rang/g, '⟩')
    .replace(/&loz;/g, '◊')
    .replace(/&loz/g, '◊')
    .replace(/&spades;/g, '♠')
    .replace(/&spades/g, '♠')
    .replace(/&clubs;/g, '♣')
    .replace(/&clubs/g, '♣')
    .replace(/&hearts;/g, '♥')
    .replace(/&hearts/g, '♥')
    .replace(/&diams;/g, '♦')
    .replace(/&diams/g, '♦')
    .replace(/&quot;/g, '"')
    .replace(/&quot/g, '"')
    .replace(/&apos;/g, "'")
    .replace(/&apos/g, "'")
    .replace(/&amp;/g, '&')
    .replace(/&amp/g, '&');

  for (const { group } of data) {
    for (const row of group) {
      try {
        if (row.variants) {
          if (row.variants.length < 2) {
            row.variants = [];
          }
        }

        if (row.variantInformation) {
          const variantsArray = [];
          if (row.variantInformation.length > 1) {
            row.variantInformation.forEach(variant => {
              variantsArray.push(variant.text);
            });
            const variantString = variantsArray.join(' | ');
            row.variantInformation = [{ text: variantString }];
          }
        }

        if (row.firstVariant || row.variantId) {
          const text = row.firstVariant[0].text;
          const split = text.split('-');
          row.variantId = [{ text: `${split[split.length - 1]}` }];
          row.firstVariant = [{ text: `${split[split.length - 1]}` }];
        }

        if (row.sku) {
          row.productUrl = [{ text: `${row.productUrl[0].text}?skuid=${row.sku[0].text}` }];
        }
        if (row.manufacturerDescription) {
          let text = '';
          row.manufacturerDescription.forEach(item => {
            text += `${item.text.replace(/\n \n/g, ' ')}  `;
          });
          row.manufacturerDescription = [
            {
              text: text,
            },
          ];
        }

        if (row.additionalDescBulletInfo && row.additionalDescBulletInfo[0].text.length > 1) {
          row.additionalDescBulletInfo[0].text = row.additionalDescBulletInfo[0].text.startsWith(' || ') ? row.additionalDescBulletInfo[0].text : ' || ' + row.additionalDescBulletInfo[0].text;
        }

        if (row.description) {
          const text = row.description[0].text;
          const splits = text.split(' ');
          if (splits[splits.length - 1] === '||') {
            const joins = splits.slice(0, splits.length - 1).join(' ');
            row.description[0].text = joins;
          }
        }

        if (row.videos) {
          const videoArray = [];
          row.videos.forEach(video => {
            if (!videoArray.includes(video.text)) {
              videoArray.push(video.text);
            }
          });
          row.videos = [{ text: '' }];
          const videoStr = videoArray.join(' | ');
          row.videos[0].text = videoStr;
        }

        if (row.manufacturerImages) {
          const manufImageArray = [];
          row.manufacturerImages.forEach(manufImage => {
            if (!manufImageArray.includes(manufImage.text)) {
              manufImageArray.push(manufImage.text);
            }
          });
          row.manufacturerImages = [{ text: '' }];
          const manufImageStr = manufImageArray.join(' | ');
          row.manufacturerImages[0].text = manufImageStr;
        }

        if (row.directions) {
          const text = row.directions[0].text;
          const splits = text.split(' ');
          if (splits[splits.length - 1] === '||') {
            const joins = splits.slice(0, splits.length - 1).join(' ');
            row.directions[0].text = joins;
          }
        }
        // row = cleanUp(row);
        Object.keys(row).forEach(header => row[header].forEach(el => {
          el.text = clean(el.text);
        }));
      } catch (exception) {
        console.log(exception);
      }
    }
  }
  // context.setState({ variantArray });
  return data;
};
module.exports = { transform };
